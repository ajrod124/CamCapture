// Generated by CoffeeScript 1.12.2
(function() {
  var App, React;

  React = require('react');

  require('./App.css');

  App = React.createClass({displayName: "App",
    getInitialState: function() {
      return {
        streaming: false,
        viewing: false,
        lastMessage: '',
        connectedPeers: 0
      };
    },
    componentWillMount: function() {
      this.ws = new WebSocket('ws://107.170.222.119:3000');
      this.setupSocket();
      this.pc = null;
      return this.localStream = null;
    },
    componentDidMount: function() {
      return this.video = document.getElementById('feed');
    },
    setupSocket: function() {
      this.ws.onopen = (function(_this) {
        return function() {
          return console.log('Socket opened');
        };
      })(this);
      this.ws.onmessage = (function(_this) {
        return function(e) {
          var obj;
          obj = JSON.parse(e.data);
          switch (obj.type) {
            case 'chatEvent':
              return _this.setState({
                lastMessage: obj.message
              });
            case 'exchangeCandidates':
              if ((_this.state.streaming && obj.source === 'viewer') || (_this.state.viewing && obj.source === 'streamer')) {
                return _this.addIceCandidate(obj.candidate);
              }
              break;
            case 'exchangeDescription':
              if ((_this.state.streaming && obj.source === 'viewer') || (_this.state.viewing && obj.source === 'streamer')) {
                return _this.setRemoteDescription(obj.desc);
              }
              break;
            case 'readyForExchange':
              if (_this.state.streaming) {
                return _this.prepareStream();
              }
              break;
            case 'closeComms':
              return _this.end();
            default:
              return console.error('Unexpected response from socket server: ', obj);
          }
        };
      })(this);
      return this.ws.onclose = (function(_this) {
        return function(e) {
          return console.log(e);
        };
      })(this);
    },
    setupPC: function(type) {
      this.pc = new RTCPeerConnection({
        'iceServers': [
          {
            'url': 'stun:stun.l.google.com:19302'
          }
        ]
      });
      this.pc.onicecandidate = (function(_this) {
        return function(event) {
          console.log('onicecandidate');
          if (event.candidate) {
            return _this.ws.send(JSON.stringify({
              type: 'exchangeCandidates',
              candidate: event.candidate,
              source: type
            }));
          }
        };
      })(this);
      this.pc.oniceconnectionstatechange = (function(_this) {
        return function(event) {
          return console.log('oniceconnectionstatechange', event.target.iceConnectionState);
        };
      })(this);
      this.pc.onsignalingstatechange = (function(_this) {
        return function(event) {
          return console.log('onsignalingstatechange', event.target.signalingState);
        };
      })(this);
      this.pc.onnegotiationneeded = (function(_this) {
        return function() {
          return console.log('onnegotiationneeded');
        };
      })(this);
      if (type === 'viewer') {
        return this.pc.onaddstream = (function(_this) {
          return function(event) {
            return _this.video.srcObject = event.stream;
          };
        })(this);
      }
    },
    prepareStream: function() {
      this.pc.addStream(this.localStream);
      return this.pc.createOffer({
        offerToReceiveVideo: 1
      }).then(((function(_this) {
        return function(desc) {
          console.log('offer created');
          return _this.pc.setLocalDescription(desc).then((function() {
            console.log('local description set');
            return _this.ws.send(JSON.stringify({
              type: 'exchangeDescription',
              desc: _this.pc.localDescription,
              source: 'streamer'
            }));
          }), _this.logError);
        };
      })(this)), this.logError);
    },
    setRemoteDescription: function(desc) {
      console.log('setremotedescription');
      this.pc.setRemoteDescription(desc).then(((function(_this) {
        return function() {
          return console.log('remote description set');
        };
      })(this)), this.logError);
      if (this.state.viewing) {
        return this.pc.createAnswer().then(((function(_this) {
          return function(_desc) {
            console.log('create answer');
            return _this.pc.setLocalDescription(_desc).then((function() {
              console.log('setLocalDescription');
              return _this.ws.send(JSON.stringify({
                type: 'exchangeDescription',
                desc: _desc,
                source: 'viewer'
              }));
            }), _this.logError);
          };
        })(this)), this.logError);
      }
    },
    addIceCandidate: function(candidate) {
      return this.pc.addIceCandidate(candidate).then(((function(_this) {
        return function() {
          return console.log('candidate added');
        };
      })(this)), this.logError);
    },
    logError: function(err) {
      return console.error(err);
    },
    start: function() {
      this.setState({
        streaming: true
      });
      this.setupPC('streamer');
      return navigator.mediaDevices.getUserMedia({
        video: {
          mandatory: {
            minHeight: 270,
            maxHeight: 270,
            minWidth: 480,
            maxWidth: 480
          }
        }
      }).then((function(_this) {
        return function(stream) {
          _this.video.srcObject = stream;
          _this.localStream = stream;
          return _this.ws.send(JSON.stringify({
            type: 'startStream'
          }));
        };
      })(this))["catch"]((function(_this) {
        return function(e) {
          return console.error('Error accessing devices');
        };
      })(this));
    },
    view: function() {
      this.setState({
        viewing: true
      });
      this.setupPC('viewer');
      return this.ws.send(JSON.stringify({
        type: 'startView'
      }));
    },
    end: function() {
      var type;
      if (this.state.streaming) {
        type = 'endStream';
      } else {
        type = 'endView';
      }
      this.setState({
        streaming: false,
        viewing: false
      });
      this.pc.close();
      this.pc = null;
      this.video.srcObject = null;
      this.localStream = null;
      return this.ws.send(JSON.stringify({
        type: type
      }));
    },
    getViewButton: function() {
      if (this.state.streaming) {
        return React.createElement("button", {
          "disabled": true
        }, "View Stream");
      } else if (this.state.viewing) {
        return React.createElement("button", {
          "className": 'view',
          "onClick": this.end
        }, "End Viewing");
      } else {
        return React.createElement("button", {
          "className": 'view',
          "onClick": this.view
        }, "View Stream");
      }
    },
    getStreamButton: function() {
      if (this.state.viewing) {
        return React.createElement("button", {
          "disabled": true
        }, "Start Stream");
      } else if (this.state.streaming) {
        return React.createElement("button", {
          "className": 'stream',
          "onClick": this.end
        }, "End Stream");
      } else {
        return React.createElement("button", {
          "className": 'stream',
          "onClick": this.start
        }, "Start Stream");
      }
    },
    render: function() {
      return React.createElement("div", {
        "className": 'container'
      }, React.createElement("video", {
        "id": 'feed',
        "autoPlay": true
      }), React.createElement("div", null, this.getStreamButton(), this.getViewButton()), React.createElement("div", null, React.createElement("p", null, 'Last message sent: ' + this.state.lastMessage)));
    }
  });

  module.exports = App;

}).call(this);
